/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).add(byte_index)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).add(byte_index)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub _short_backupbuf: [::std::os::raw::c_char; 1usize],
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_short_backupbuf"]
        [::std::mem::offset_of!(_IO_FILE, _short_backupbuf) - 119usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::_prevchain"]
        [::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
impl _IO_FILE {
    #[inline]
    pub fn _flags2(&self) -> ::std::os::raw::c_int {
        unsafe { u32::cast_signed(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set__flags2(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = i32::cast_unsigned(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _flags2_raw(this: *const Self) -> ::std::os::raw::c_int {
        unsafe {
            u32::cast_signed(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__flags2_raw(this: *mut Self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = i32::cast_unsigned(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(_flags2: ::std::os::raw::c_int) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let _flags2: u32 = unsafe { i32::cast_unsigned(_flags2) };
            _flags2 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const heatmap_type_heatmap_min: heatmap_type = 0;
pub const heatmap_type_heatmap_max: heatmap_type = 1;
pub const heatmap_type_heatmap_value: heatmap_type = 2;
pub type heatmap_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct heatmap_t {
    pub type_: heatmap_type,
    pub num_rows: ::std::os::raw::c_int,
    pub num_columns: ::std::os::raw::c_int,
    pub min_v: ::std::os::raw::c_int,
    pub max_v: ::std::os::raw::c_int,
    pub min_h: ::std::os::raw::c_int,
    pub max_h: ::std::os::raw::c_int,
    pub binning_factor: f32,
    pub values: *mut *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of heatmap_t"][::std::mem::size_of::<heatmap_t>() - 40usize];
    ["Alignment of heatmap_t"][::std::mem::align_of::<heatmap_t>() - 8usize];
    ["Offset of field: heatmap_t::type_"][::std::mem::offset_of!(heatmap_t, type_) - 0usize];
    ["Offset of field: heatmap_t::num_rows"][::std::mem::offset_of!(heatmap_t, num_rows) - 4usize];
    ["Offset of field: heatmap_t::num_columns"]
        [::std::mem::offset_of!(heatmap_t, num_columns) - 8usize];
    ["Offset of field: heatmap_t::min_v"][::std::mem::offset_of!(heatmap_t, min_v) - 12usize];
    ["Offset of field: heatmap_t::max_v"][::std::mem::offset_of!(heatmap_t, max_v) - 16usize];
    ["Offset of field: heatmap_t::min_h"][::std::mem::offset_of!(heatmap_t, min_h) - 20usize];
    ["Offset of field: heatmap_t::max_h"][::std::mem::offset_of!(heatmap_t, max_h) - 24usize];
    ["Offset of field: heatmap_t::binning_factor"]
        [::std::mem::offset_of!(heatmap_t, binning_factor) - 28usize];
    ["Offset of field: heatmap_t::values"][::std::mem::offset_of!(heatmap_t, values) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct profiler_counter_t {
    pub total: u64,
    pub samples: u64,
    pub min: u64,
    pub max: u64,
    pub m_oldM: f64,
    pub m_newM: f64,
    pub m_oldS: f64,
    pub m_newS: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of profiler_counter_t"][::std::mem::size_of::<profiler_counter_t>() - 64usize];
    ["Alignment of profiler_counter_t"][::std::mem::align_of::<profiler_counter_t>() - 8usize];
    ["Offset of field: profiler_counter_t::total"]
        [::std::mem::offset_of!(profiler_counter_t, total) - 0usize];
    ["Offset of field: profiler_counter_t::samples"]
        [::std::mem::offset_of!(profiler_counter_t, samples) - 8usize];
    ["Offset of field: profiler_counter_t::min"]
        [::std::mem::offset_of!(profiler_counter_t, min) - 16usize];
    ["Offset of field: profiler_counter_t::max"]
        [::std::mem::offset_of!(profiler_counter_t, max) - 24usize];
    ["Offset of field: profiler_counter_t::m_oldM"]
        [::std::mem::offset_of!(profiler_counter_t, m_oldM) - 32usize];
    ["Offset of field: profiler_counter_t::m_newM"]
        [::std::mem::offset_of!(profiler_counter_t, m_newM) - 40usize];
    ["Offset of field: profiler_counter_t::m_oldS"]
        [::std::mem::offset_of!(profiler_counter_t, m_oldS) - 48usize];
    ["Offset of field: profiler_counter_t::m_newS"]
        [::std::mem::offset_of!(profiler_counter_t, m_newS) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct profiler_timer_t {
    pub begin_timer: timespec,
    pub time_ns: profiler_counter_t,
    pub accumulated: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of profiler_timer_t"][::std::mem::size_of::<profiler_timer_t>() - 88usize];
    ["Alignment of profiler_timer_t"][::std::mem::align_of::<profiler_timer_t>() - 8usize];
    ["Offset of field: profiler_timer_t::begin_timer"]
        [::std::mem::offset_of!(profiler_timer_t, begin_timer) - 0usize];
    ["Offset of field: profiler_timer_t::time_ns"]
        [::std::mem::offset_of!(profiler_timer_t, time_ns) - 16usize];
    ["Offset of field: profiler_timer_t::accumulated"]
        [::std::mem::offset_of!(profiler_timer_t, accumulated) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vector_t {
    pub memory: *mut ::std::os::raw::c_void,
    pub used: u64,
    pub element_size: u64,
    pub elements_allocated: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vector_t"][::std::mem::size_of::<vector_t>() - 32usize];
    ["Alignment of vector_t"][::std::mem::align_of::<vector_t>() - 8usize];
    ["Offset of field: vector_t::memory"][::std::mem::offset_of!(vector_t, memory) - 0usize];
    ["Offset of field: vector_t::used"][::std::mem::offset_of!(vector_t, used) - 8usize];
    ["Offset of field: vector_t::element_size"]
        [::std::mem::offset_of!(vector_t, element_size) - 16usize];
    ["Offset of field: vector_t::elements_allocated"]
        [::std::mem::offset_of!(vector_t, elements_allocated) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linear_penalties_t {
    pub match_: ::std::os::raw::c_int,
    pub mismatch: ::std::os::raw::c_int,
    pub indel: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linear_penalties_t"][::std::mem::size_of::<linear_penalties_t>() - 12usize];
    ["Alignment of linear_penalties_t"][::std::mem::align_of::<linear_penalties_t>() - 4usize];
    ["Offset of field: linear_penalties_t::match_"]
        [::std::mem::offset_of!(linear_penalties_t, match_) - 0usize];
    ["Offset of field: linear_penalties_t::mismatch"]
        [::std::mem::offset_of!(linear_penalties_t, mismatch) - 4usize];
    ["Offset of field: linear_penalties_t::indel"]
        [::std::mem::offset_of!(linear_penalties_t, indel) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct affine_penalties_t {
    pub match_: ::std::os::raw::c_int,
    pub mismatch: ::std::os::raw::c_int,
    pub gap_opening: ::std::os::raw::c_int,
    pub gap_extension: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of affine_penalties_t"][::std::mem::size_of::<affine_penalties_t>() - 16usize];
    ["Alignment of affine_penalties_t"][::std::mem::align_of::<affine_penalties_t>() - 4usize];
    ["Offset of field: affine_penalties_t::match_"]
        [::std::mem::offset_of!(affine_penalties_t, match_) - 0usize];
    ["Offset of field: affine_penalties_t::mismatch"]
        [::std::mem::offset_of!(affine_penalties_t, mismatch) - 4usize];
    ["Offset of field: affine_penalties_t::gap_opening"]
        [::std::mem::offset_of!(affine_penalties_t, gap_opening) - 8usize];
    ["Offset of field: affine_penalties_t::gap_extension"]
        [::std::mem::offset_of!(affine_penalties_t, gap_extension) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct affine2p_penalties_t {
    pub match_: ::std::os::raw::c_int,
    pub mismatch: ::std::os::raw::c_int,
    pub gap_opening1: ::std::os::raw::c_int,
    pub gap_extension1: ::std::os::raw::c_int,
    pub gap_opening2: ::std::os::raw::c_int,
    pub gap_extension2: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of affine2p_penalties_t"][::std::mem::size_of::<affine2p_penalties_t>() - 24usize];
    ["Alignment of affine2p_penalties_t"][::std::mem::align_of::<affine2p_penalties_t>() - 4usize];
    ["Offset of field: affine2p_penalties_t::match_"]
        [::std::mem::offset_of!(affine2p_penalties_t, match_) - 0usize];
    ["Offset of field: affine2p_penalties_t::mismatch"]
        [::std::mem::offset_of!(affine2p_penalties_t, mismatch) - 4usize];
    ["Offset of field: affine2p_penalties_t::gap_opening1"]
        [::std::mem::offset_of!(affine2p_penalties_t, gap_opening1) - 8usize];
    ["Offset of field: affine2p_penalties_t::gap_extension1"]
        [::std::mem::offset_of!(affine2p_penalties_t, gap_extension1) - 12usize];
    ["Offset of field: affine2p_penalties_t::gap_opening2"]
        [::std::mem::offset_of!(affine2p_penalties_t, gap_opening2) - 16usize];
    ["Offset of field: affine2p_penalties_t::gap_extension2"]
        [::std::mem::offset_of!(affine2p_penalties_t, gap_extension2) - 20usize];
};
pub const affine2p_matrix_type_affine2p_matrix_M: affine2p_matrix_type = 0;
pub const affine2p_matrix_type_affine2p_matrix_I1: affine2p_matrix_type = 1;
pub const affine2p_matrix_type_affine2p_matrix_I2: affine2p_matrix_type = 2;
pub const affine2p_matrix_type_affine2p_matrix_D1: affine2p_matrix_type = 3;
pub const affine2p_matrix_type_affine2p_matrix_D2: affine2p_matrix_type = 4;
pub type affine2p_matrix_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cigar_t {
    pub operations: *mut ::std::os::raw::c_char,
    pub max_operations: ::std::os::raw::c_int,
    pub begin_offset: ::std::os::raw::c_int,
    pub end_offset: ::std::os::raw::c_int,
    pub score: ::std::os::raw::c_int,
    pub end_v: ::std::os::raw::c_int,
    pub end_h: ::std::os::raw::c_int,
    pub has_misms: bool,
    pub cigar_buffer: *mut u32,
    pub cigar_length: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cigar_t"][::std::mem::size_of::<cigar_t>() - 56usize];
    ["Alignment of cigar_t"][::std::mem::align_of::<cigar_t>() - 8usize];
    ["Offset of field: cigar_t::operations"][::std::mem::offset_of!(cigar_t, operations) - 0usize];
    ["Offset of field: cigar_t::max_operations"]
        [::std::mem::offset_of!(cigar_t, max_operations) - 8usize];
    ["Offset of field: cigar_t::begin_offset"]
        [::std::mem::offset_of!(cigar_t, begin_offset) - 12usize];
    ["Offset of field: cigar_t::end_offset"][::std::mem::offset_of!(cigar_t, end_offset) - 16usize];
    ["Offset of field: cigar_t::score"][::std::mem::offset_of!(cigar_t, score) - 20usize];
    ["Offset of field: cigar_t::end_v"][::std::mem::offset_of!(cigar_t, end_v) - 24usize];
    ["Offset of field: cigar_t::end_h"][::std::mem::offset_of!(cigar_t, end_h) - 28usize];
    ["Offset of field: cigar_t::has_misms"][::std::mem::offset_of!(cigar_t, has_misms) - 32usize];
    ["Offset of field: cigar_t::cigar_buffer"]
        [::std::mem::offset_of!(cigar_t, cigar_buffer) - 40usize];
    ["Offset of field: cigar_t::cigar_length"]
        [::std::mem::offset_of!(cigar_t, cigar_length) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mm_allocator_t {
    pub request_ticker: u64,
    pub segment_size: u64,
    pub segments: *mut vector_t,
    pub segments_free: *mut vector_t,
    pub current_segment_idx: u64,
    pub malloc_requests: *mut vector_t,
    pub malloc_requests_freed: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mm_allocator_t"][::std::mem::size_of::<mm_allocator_t>() - 56usize];
    ["Alignment of mm_allocator_t"][::std::mem::align_of::<mm_allocator_t>() - 8usize];
    ["Offset of field: mm_allocator_t::request_ticker"]
        [::std::mem::offset_of!(mm_allocator_t, request_ticker) - 0usize];
    ["Offset of field: mm_allocator_t::segment_size"]
        [::std::mem::offset_of!(mm_allocator_t, segment_size) - 8usize];
    ["Offset of field: mm_allocator_t::segments"]
        [::std::mem::offset_of!(mm_allocator_t, segments) - 16usize];
    ["Offset of field: mm_allocator_t::segments_free"]
        [::std::mem::offset_of!(mm_allocator_t, segments_free) - 24usize];
    ["Offset of field: mm_allocator_t::current_segment_idx"]
        [::std::mem::offset_of!(mm_allocator_t, current_segment_idx) - 32usize];
    ["Offset of field: mm_allocator_t::malloc_requests"]
        [::std::mem::offset_of!(mm_allocator_t, malloc_requests) - 40usize];
    ["Offset of field: mm_allocator_t::malloc_requests_freed"]
        [::std::mem::offset_of!(mm_allocator_t, malloc_requests_freed) - 48usize];
};
pub type wf_offset_t = i32;
pub const distance_metric_t_indel: distance_metric_t = 0;
pub const distance_metric_t_edit: distance_metric_t = 1;
pub const distance_metric_t_gap_linear: distance_metric_t = 2;
pub const distance_metric_t_gap_affine: distance_metric_t = 3;
pub const distance_metric_t_gap_affine_2p: distance_metric_t = 4;
pub type distance_metric_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_penalties_t {
    pub distance_metric: distance_metric_t,
    pub match_: ::std::os::raw::c_int,
    pub mismatch: ::std::os::raw::c_int,
    pub gap_opening1: ::std::os::raw::c_int,
    pub gap_extension1: ::std::os::raw::c_int,
    pub gap_opening2: ::std::os::raw::c_int,
    pub gap_extension2: ::std::os::raw::c_int,
    pub linear_penalties: linear_penalties_t,
    pub affine_penalties: affine_penalties_t,
    pub affine2p_penalties: affine2p_penalties_t,
    pub internal_gap_e: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_penalties_t"][::std::mem::size_of::<wavefront_penalties_t>() - 84usize];
    ["Alignment of wavefront_penalties_t"]
        [::std::mem::align_of::<wavefront_penalties_t>() - 4usize];
    ["Offset of field: wavefront_penalties_t::distance_metric"]
        [::std::mem::offset_of!(wavefront_penalties_t, distance_metric) - 0usize];
    ["Offset of field: wavefront_penalties_t::match_"]
        [::std::mem::offset_of!(wavefront_penalties_t, match_) - 4usize];
    ["Offset of field: wavefront_penalties_t::mismatch"]
        [::std::mem::offset_of!(wavefront_penalties_t, mismatch) - 8usize];
    ["Offset of field: wavefront_penalties_t::gap_opening1"]
        [::std::mem::offset_of!(wavefront_penalties_t, gap_opening1) - 12usize];
    ["Offset of field: wavefront_penalties_t::gap_extension1"]
        [::std::mem::offset_of!(wavefront_penalties_t, gap_extension1) - 16usize];
    ["Offset of field: wavefront_penalties_t::gap_opening2"]
        [::std::mem::offset_of!(wavefront_penalties_t, gap_opening2) - 20usize];
    ["Offset of field: wavefront_penalties_t::gap_extension2"]
        [::std::mem::offset_of!(wavefront_penalties_t, gap_extension2) - 24usize];
    ["Offset of field: wavefront_penalties_t::linear_penalties"]
        [::std::mem::offset_of!(wavefront_penalties_t, linear_penalties) - 28usize];
    ["Offset of field: wavefront_penalties_t::affine_penalties"]
        [::std::mem::offset_of!(wavefront_penalties_t, affine_penalties) - 40usize];
    ["Offset of field: wavefront_penalties_t::affine2p_penalties"]
        [::std::mem::offset_of!(wavefront_penalties_t, affine2p_penalties) - 56usize];
    ["Offset of field: wavefront_penalties_t::internal_gap_e"]
        [::std::mem::offset_of!(wavefront_penalties_t, internal_gap_e) - 80usize];
};
unsafe extern "C" {
    pub fn wavefront_penalties_set_indel(wf_penalties: *mut wavefront_penalties_t);
}
unsafe extern "C" {
    pub fn wavefront_penalties_set_edit(wf_penalties: *mut wavefront_penalties_t);
}
unsafe extern "C" {
    pub fn wavefront_penalties_set_linear(
        wf_penalties: *mut wavefront_penalties_t,
        linear_penalties: *mut linear_penalties_t,
    );
}
unsafe extern "C" {
    pub fn wavefront_penalties_set_affine(
        wf_penalties: *mut wavefront_penalties_t,
        affine_penalties: *mut affine_penalties_t,
    );
}
unsafe extern "C" {
    pub fn wavefront_penalties_set_affine2p(
        wf_penalties: *mut wavefront_penalties_t,
        affine2p_penalties: *mut affine2p_penalties_t,
    );
}
unsafe extern "C" {
    pub fn wavefront_penalties_print(stream: *mut FILE, wf_penalties: *mut wavefront_penalties_t);
}
pub type wavefront_aligner_t = _wavefront_aligner_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_plot_attr_t {
    pub enabled: bool,
    pub resolution_points: ::std::os::raw::c_int,
    pub align_level: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_plot_attr_t"][::std::mem::size_of::<wavefront_plot_attr_t>() - 12usize];
    ["Alignment of wavefront_plot_attr_t"]
        [::std::mem::align_of::<wavefront_plot_attr_t>() - 4usize];
    ["Offset of field: wavefront_plot_attr_t::enabled"]
        [::std::mem::offset_of!(wavefront_plot_attr_t, enabled) - 0usize];
    ["Offset of field: wavefront_plot_attr_t::resolution_points"]
        [::std::mem::offset_of!(wavefront_plot_attr_t, resolution_points) - 4usize];
    ["Offset of field: wavefront_plot_attr_t::align_level"]
        [::std::mem::offset_of!(wavefront_plot_attr_t, align_level) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_plot_t {
    pub attributes: wavefront_plot_attr_t,
    pub distance_metric: distance_metric_t,
    pub min_v: ::std::os::raw::c_int,
    pub max_v: ::std::os::raw::c_int,
    pub min_h: ::std::os::raw::c_int,
    pub max_h: ::std::os::raw::c_int,
    pub m_heatmap: *mut heatmap_t,
    pub i1_heatmap: *mut heatmap_t,
    pub d1_heatmap: *mut heatmap_t,
    pub i2_heatmap: *mut heatmap_t,
    pub d2_heatmap: *mut heatmap_t,
    pub behavior_heatmap: *mut heatmap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_plot_t"][::std::mem::size_of::<wavefront_plot_t>() - 80usize];
    ["Alignment of wavefront_plot_t"][::std::mem::align_of::<wavefront_plot_t>() - 8usize];
    ["Offset of field: wavefront_plot_t::attributes"]
        [::std::mem::offset_of!(wavefront_plot_t, attributes) - 0usize];
    ["Offset of field: wavefront_plot_t::distance_metric"]
        [::std::mem::offset_of!(wavefront_plot_t, distance_metric) - 12usize];
    ["Offset of field: wavefront_plot_t::min_v"]
        [::std::mem::offset_of!(wavefront_plot_t, min_v) - 16usize];
    ["Offset of field: wavefront_plot_t::max_v"]
        [::std::mem::offset_of!(wavefront_plot_t, max_v) - 20usize];
    ["Offset of field: wavefront_plot_t::min_h"]
        [::std::mem::offset_of!(wavefront_plot_t, min_h) - 24usize];
    ["Offset of field: wavefront_plot_t::max_h"]
        [::std::mem::offset_of!(wavefront_plot_t, max_h) - 28usize];
    ["Offset of field: wavefront_plot_t::m_heatmap"]
        [::std::mem::offset_of!(wavefront_plot_t, m_heatmap) - 32usize];
    ["Offset of field: wavefront_plot_t::i1_heatmap"]
        [::std::mem::offset_of!(wavefront_plot_t, i1_heatmap) - 40usize];
    ["Offset of field: wavefront_plot_t::d1_heatmap"]
        [::std::mem::offset_of!(wavefront_plot_t, d1_heatmap) - 48usize];
    ["Offset of field: wavefront_plot_t::i2_heatmap"]
        [::std::mem::offset_of!(wavefront_plot_t, i2_heatmap) - 56usize];
    ["Offset of field: wavefront_plot_t::d2_heatmap"]
        [::std::mem::offset_of!(wavefront_plot_t, d2_heatmap) - 64usize];
    ["Offset of field: wavefront_plot_t::behavior_heatmap"]
        [::std::mem::offset_of!(wavefront_plot_t, behavior_heatmap) - 72usize];
};
unsafe extern "C" {
    pub fn wavefront_plot_new(
        distance_metric: distance_metric_t,
        pattern_length: ::std::os::raw::c_int,
        text_length: ::std::os::raw::c_int,
        attributes: *mut wavefront_plot_attr_t,
    ) -> *mut wavefront_plot_t;
}
unsafe extern "C" {
    pub fn wavefront_plot_resize(
        wf_plot: *mut wavefront_plot_t,
        pattern_length: ::std::os::raw::c_int,
        text_length: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_plot_delete(wf_plot: *mut wavefront_plot_t);
}
unsafe extern "C" {
    pub fn wavefront_plot(
        wf_aligner: *mut wavefront_aligner_t,
        score: ::std::os::raw::c_int,
        align_level: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_plot_print(stream: *mut FILE, wf_aligner: *mut wavefront_aligner_t);
}
unsafe extern "C" {
    pub fn wavefront_aligner_print(
        stream: *mut FILE,
        wf_aligner: *mut wavefront_aligner_t,
        score_begin: ::std::os::raw::c_int,
        score_end: ::std::os::raw::c_int,
        num_wfs_per_row: ::std::os::raw::c_int,
        backtrace_length: ::std::os::raw::c_int,
    );
}
pub const wf_heuristic_strategy_wf_heuristic_none: wf_heuristic_strategy = 0;
pub const wf_heuristic_strategy_wf_heuristic_banded_static: wf_heuristic_strategy = 1;
pub const wf_heuristic_strategy_wf_heuristic_banded_adaptive: wf_heuristic_strategy = 2;
pub const wf_heuristic_strategy_wf_heuristic_wfadaptive: wf_heuristic_strategy = 4;
pub const wf_heuristic_strategy_wf_heuristic_xdrop: wf_heuristic_strategy = 16;
pub const wf_heuristic_strategy_wf_heuristic_zdrop: wf_heuristic_strategy = 32;
pub const wf_heuristic_strategy_wf_heuristic_wfmash: wf_heuristic_strategy = 64;
pub type wf_heuristic_strategy = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_heuristic_t {
    pub strategy: wf_heuristic_strategy,
    pub steps_between_cutoffs: ::std::os::raw::c_int,
    pub min_k: ::std::os::raw::c_int,
    pub max_k: ::std::os::raw::c_int,
    pub min_wavefront_length: ::std::os::raw::c_int,
    pub max_distance_threshold: ::std::os::raw::c_int,
    pub xdrop: ::std::os::raw::c_int,
    pub zdrop: ::std::os::raw::c_int,
    pub steps_wait: ::std::os::raw::c_int,
    pub max_sw_score: ::std::os::raw::c_int,
    pub max_wf_score: ::std::os::raw::c_int,
    pub max_sw_score_offset: ::std::os::raw::c_int,
    pub max_sw_score_k: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_heuristic_t"][::std::mem::size_of::<wavefront_heuristic_t>() - 52usize];
    ["Alignment of wavefront_heuristic_t"]
        [::std::mem::align_of::<wavefront_heuristic_t>() - 4usize];
    ["Offset of field: wavefront_heuristic_t::strategy"]
        [::std::mem::offset_of!(wavefront_heuristic_t, strategy) - 0usize];
    ["Offset of field: wavefront_heuristic_t::steps_between_cutoffs"]
        [::std::mem::offset_of!(wavefront_heuristic_t, steps_between_cutoffs) - 4usize];
    ["Offset of field: wavefront_heuristic_t::min_k"]
        [::std::mem::offset_of!(wavefront_heuristic_t, min_k) - 8usize];
    ["Offset of field: wavefront_heuristic_t::max_k"]
        [::std::mem::offset_of!(wavefront_heuristic_t, max_k) - 12usize];
    ["Offset of field: wavefront_heuristic_t::min_wavefront_length"]
        [::std::mem::offset_of!(wavefront_heuristic_t, min_wavefront_length) - 16usize];
    ["Offset of field: wavefront_heuristic_t::max_distance_threshold"]
        [::std::mem::offset_of!(wavefront_heuristic_t, max_distance_threshold) - 20usize];
    ["Offset of field: wavefront_heuristic_t::xdrop"]
        [::std::mem::offset_of!(wavefront_heuristic_t, xdrop) - 24usize];
    ["Offset of field: wavefront_heuristic_t::zdrop"]
        [::std::mem::offset_of!(wavefront_heuristic_t, zdrop) - 28usize];
    ["Offset of field: wavefront_heuristic_t::steps_wait"]
        [::std::mem::offset_of!(wavefront_heuristic_t, steps_wait) - 32usize];
    ["Offset of field: wavefront_heuristic_t::max_sw_score"]
        [::std::mem::offset_of!(wavefront_heuristic_t, max_sw_score) - 36usize];
    ["Offset of field: wavefront_heuristic_t::max_wf_score"]
        [::std::mem::offset_of!(wavefront_heuristic_t, max_wf_score) - 40usize];
    ["Offset of field: wavefront_heuristic_t::max_sw_score_offset"]
        [::std::mem::offset_of!(wavefront_heuristic_t, max_sw_score_offset) - 44usize];
    ["Offset of field: wavefront_heuristic_t::max_sw_score_k"]
        [::std::mem::offset_of!(wavefront_heuristic_t, max_sw_score_k) - 48usize];
};
unsafe extern "C" {
    pub fn wavefront_heuristic_set_none(wf_heuristic: *mut wavefront_heuristic_t);
}
unsafe extern "C" {
    pub fn wavefront_heuristic_set_wfadaptive(
        wf_heuristic: *mut wavefront_heuristic_t,
        min_wavefront_length: ::std::os::raw::c_int,
        max_distance_threshold: ::std::os::raw::c_int,
        steps_between_cutoffs: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_heuristic_set_wfmash(
        wf_heuristic: *mut wavefront_heuristic_t,
        min_wavefront_length: ::std::os::raw::c_int,
        max_distance_threshold: ::std::os::raw::c_int,
        steps_between_cutoffs: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_heuristic_set_xdrop(
        wf_heuristic: *mut wavefront_heuristic_t,
        xdrop: ::std::os::raw::c_int,
        steps_between_cutoffs: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_heuristic_set_zdrop(
        wf_heuristic: *mut wavefront_heuristic_t,
        ydrop: ::std::os::raw::c_int,
        steps_between_cutoffs: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_heuristic_set_banded_static(
        wf_heuristic: *mut wavefront_heuristic_t,
        band_min_k: ::std::os::raw::c_int,
        band_max_k: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_heuristic_set_banded_adaptive(
        wf_heuristic: *mut wavefront_heuristic_t,
        band_min_k: ::std::os::raw::c_int,
        band_max_k: ::std::os::raw::c_int,
        steps_between_cutoffs: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_heuristic_clear(wf_heuristic: *mut wavefront_heuristic_t);
}
unsafe extern "C" {
    pub fn wavefront_heuristic_cufoff(
        wf_aligner: *mut wavefront_aligner_t,
        score: ::std::os::raw::c_int,
        score_mod: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn wavefront_heuristic_print(stream: *mut FILE, wf_heuristic: *mut wavefront_heuristic_t);
}
pub const alignment_scope_t_compute_score: alignment_scope_t = 0;
pub const alignment_scope_t_compute_alignment: alignment_scope_t = 1;
pub type alignment_scope_t = ::std::os::raw::c_uint;
pub const alignment_span_t_alignment_end2end: alignment_span_t = 0;
pub const alignment_span_t_alignment_endsfree: alignment_span_t = 1;
pub type alignment_span_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alignment_form_t {
    pub span: alignment_span_t,
    pub extension: bool,
    pub pattern_begin_free: ::std::os::raw::c_int,
    pub pattern_end_free: ::std::os::raw::c_int,
    pub text_begin_free: ::std::os::raw::c_int,
    pub text_end_free: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of alignment_form_t"][::std::mem::size_of::<alignment_form_t>() - 24usize];
    ["Alignment of alignment_form_t"][::std::mem::align_of::<alignment_form_t>() - 4usize];
    ["Offset of field: alignment_form_t::span"]
        [::std::mem::offset_of!(alignment_form_t, span) - 0usize];
    ["Offset of field: alignment_form_t::extension"]
        [::std::mem::offset_of!(alignment_form_t, extension) - 4usize];
    ["Offset of field: alignment_form_t::pattern_begin_free"]
        [::std::mem::offset_of!(alignment_form_t, pattern_begin_free) - 8usize];
    ["Offset of field: alignment_form_t::pattern_end_free"]
        [::std::mem::offset_of!(alignment_form_t, pattern_end_free) - 12usize];
    ["Offset of field: alignment_form_t::text_begin_free"]
        [::std::mem::offset_of!(alignment_form_t, text_begin_free) - 16usize];
    ["Offset of field: alignment_form_t::text_end_free"]
        [::std::mem::offset_of!(alignment_form_t, text_end_free) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alignment_system_t {
    pub max_alignment_steps: ::std::os::raw::c_int,
    pub probe_interval_global: ::std::os::raw::c_int,
    pub probe_interval_compact: ::std::os::raw::c_int,
    pub max_partial_compacts: u64,
    pub max_memory_compact: u64,
    pub max_memory_resident: u64,
    pub max_memory_abort: u64,
    pub verbose: ::std::os::raw::c_int,
    pub check_alignment_correct: bool,
    pub timer: profiler_timer_t,
    pub max_num_threads: ::std::os::raw::c_int,
    pub min_offsets_per_thread: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of alignment_system_t"][::std::mem::size_of::<alignment_system_t>() - 152usize];
    ["Alignment of alignment_system_t"][::std::mem::align_of::<alignment_system_t>() - 8usize];
    ["Offset of field: alignment_system_t::max_alignment_steps"]
        [::std::mem::offset_of!(alignment_system_t, max_alignment_steps) - 0usize];
    ["Offset of field: alignment_system_t::probe_interval_global"]
        [::std::mem::offset_of!(alignment_system_t, probe_interval_global) - 4usize];
    ["Offset of field: alignment_system_t::probe_interval_compact"]
        [::std::mem::offset_of!(alignment_system_t, probe_interval_compact) - 8usize];
    ["Offset of field: alignment_system_t::max_partial_compacts"]
        [::std::mem::offset_of!(alignment_system_t, max_partial_compacts) - 16usize];
    ["Offset of field: alignment_system_t::max_memory_compact"]
        [::std::mem::offset_of!(alignment_system_t, max_memory_compact) - 24usize];
    ["Offset of field: alignment_system_t::max_memory_resident"]
        [::std::mem::offset_of!(alignment_system_t, max_memory_resident) - 32usize];
    ["Offset of field: alignment_system_t::max_memory_abort"]
        [::std::mem::offset_of!(alignment_system_t, max_memory_abort) - 40usize];
    ["Offset of field: alignment_system_t::verbose"]
        [::std::mem::offset_of!(alignment_system_t, verbose) - 48usize];
    ["Offset of field: alignment_system_t::check_alignment_correct"]
        [::std::mem::offset_of!(alignment_system_t, check_alignment_correct) - 52usize];
    ["Offset of field: alignment_system_t::timer"]
        [::std::mem::offset_of!(alignment_system_t, timer) - 56usize];
    ["Offset of field: alignment_system_t::max_num_threads"]
        [::std::mem::offset_of!(alignment_system_t, max_num_threads) - 144usize];
    ["Offset of field: alignment_system_t::min_offsets_per_thread"]
        [::std::mem::offset_of!(alignment_system_t, min_offsets_per_thread) - 148usize];
};
pub const wavefront_memory_t_wavefront_memory_high: wavefront_memory_t = 0;
pub const wavefront_memory_t_wavefront_memory_med: wavefront_memory_t = 1;
pub const wavefront_memory_t_wavefront_memory_low: wavefront_memory_t = 2;
pub const wavefront_memory_t_wavefront_memory_ultralow: wavefront_memory_t = 3;
pub type wavefront_memory_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_aligner_attr_t {
    pub distance_metric: distance_metric_t,
    pub alignment_scope: alignment_scope_t,
    pub alignment_form: alignment_form_t,
    pub linear_penalties: linear_penalties_t,
    pub affine_penalties: affine_penalties_t,
    pub affine2p_penalties: affine2p_penalties_t,
    pub heuristic: wavefront_heuristic_t,
    pub memory_mode: wavefront_memory_t,
    pub mm_allocator: *mut mm_allocator_t,
    pub plot: wavefront_plot_attr_t,
    pub system: alignment_system_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_aligner_attr_t"]
        [::std::mem::size_of::<wavefront_aligner_attr_t>() - 320usize];
    ["Alignment of wavefront_aligner_attr_t"]
        [::std::mem::align_of::<wavefront_aligner_attr_t>() - 8usize];
    ["Offset of field: wavefront_aligner_attr_t::distance_metric"]
        [::std::mem::offset_of!(wavefront_aligner_attr_t, distance_metric) - 0usize];
    ["Offset of field: wavefront_aligner_attr_t::alignment_scope"]
        [::std::mem::offset_of!(wavefront_aligner_attr_t, alignment_scope) - 4usize];
    ["Offset of field: wavefront_aligner_attr_t::alignment_form"]
        [::std::mem::offset_of!(wavefront_aligner_attr_t, alignment_form) - 8usize];
    ["Offset of field: wavefront_aligner_attr_t::linear_penalties"]
        [::std::mem::offset_of!(wavefront_aligner_attr_t, linear_penalties) - 32usize];
    ["Offset of field: wavefront_aligner_attr_t::affine_penalties"]
        [::std::mem::offset_of!(wavefront_aligner_attr_t, affine_penalties) - 44usize];
    ["Offset of field: wavefront_aligner_attr_t::affine2p_penalties"]
        [::std::mem::offset_of!(wavefront_aligner_attr_t, affine2p_penalties) - 60usize];
    ["Offset of field: wavefront_aligner_attr_t::heuristic"]
        [::std::mem::offset_of!(wavefront_aligner_attr_t, heuristic) - 84usize];
    ["Offset of field: wavefront_aligner_attr_t::memory_mode"]
        [::std::mem::offset_of!(wavefront_aligner_attr_t, memory_mode) - 136usize];
    ["Offset of field: wavefront_aligner_attr_t::mm_allocator"]
        [::std::mem::offset_of!(wavefront_aligner_attr_t, mm_allocator) - 144usize];
    ["Offset of field: wavefront_aligner_attr_t::plot"]
        [::std::mem::offset_of!(wavefront_aligner_attr_t, plot) - 152usize];
    ["Offset of field: wavefront_aligner_attr_t::system"]
        [::std::mem::offset_of!(wavefront_aligner_attr_t, system) - 168usize];
};
unsafe extern "C" {
    pub static mut wavefront_aligner_attr_default: wavefront_aligner_attr_t;
}
pub type alignment_match_funct_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub const wf_sequences_mode_t_wf_sequences_ascii: wf_sequences_mode_t = 0;
pub const wf_sequences_mode_t_wf_sequences_lambda: wf_sequences_mode_t = 1;
pub const wf_sequences_mode_t_wf_sequences_packed2bits: wf_sequences_mode_t = 2;
pub type wf_sequences_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_sequences_t {
    pub mode: wf_sequences_mode_t,
    pub reverse: bool,
    pub pattern: *mut ::std::os::raw::c_char,
    pub text: *mut ::std::os::raw::c_char,
    pub pattern_begin: ::std::os::raw::c_int,
    pub pattern_length: ::std::os::raw::c_int,
    pub text_begin: ::std::os::raw::c_int,
    pub text_length: ::std::os::raw::c_int,
    pub match_funct: alignment_match_funct_t,
    pub match_funct_arguments: *mut ::std::os::raw::c_void,
    pub seq_buffer: *mut ::std::os::raw::c_char,
    pub seq_buffer_allocated: ::std::os::raw::c_int,
    pub pattern_buffer: *mut ::std::os::raw::c_char,
    pub text_buffer: *mut ::std::os::raw::c_char,
    pub pattern_buffer_length: ::std::os::raw::c_int,
    pub text_buffer_length: ::std::os::raw::c_int,
    pub pattern_eos: ::std::os::raw::c_char,
    pub text_eos: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_sequences_t"][::std::mem::size_of::<wavefront_sequences_t>() - 104usize];
    ["Alignment of wavefront_sequences_t"]
        [::std::mem::align_of::<wavefront_sequences_t>() - 8usize];
    ["Offset of field: wavefront_sequences_t::mode"]
        [::std::mem::offset_of!(wavefront_sequences_t, mode) - 0usize];
    ["Offset of field: wavefront_sequences_t::reverse"]
        [::std::mem::offset_of!(wavefront_sequences_t, reverse) - 4usize];
    ["Offset of field: wavefront_sequences_t::pattern"]
        [::std::mem::offset_of!(wavefront_sequences_t, pattern) - 8usize];
    ["Offset of field: wavefront_sequences_t::text"]
        [::std::mem::offset_of!(wavefront_sequences_t, text) - 16usize];
    ["Offset of field: wavefront_sequences_t::pattern_begin"]
        [::std::mem::offset_of!(wavefront_sequences_t, pattern_begin) - 24usize];
    ["Offset of field: wavefront_sequences_t::pattern_length"]
        [::std::mem::offset_of!(wavefront_sequences_t, pattern_length) - 28usize];
    ["Offset of field: wavefront_sequences_t::text_begin"]
        [::std::mem::offset_of!(wavefront_sequences_t, text_begin) - 32usize];
    ["Offset of field: wavefront_sequences_t::text_length"]
        [::std::mem::offset_of!(wavefront_sequences_t, text_length) - 36usize];
    ["Offset of field: wavefront_sequences_t::match_funct"]
        [::std::mem::offset_of!(wavefront_sequences_t, match_funct) - 40usize];
    ["Offset of field: wavefront_sequences_t::match_funct_arguments"]
        [::std::mem::offset_of!(wavefront_sequences_t, match_funct_arguments) - 48usize];
    ["Offset of field: wavefront_sequences_t::seq_buffer"]
        [::std::mem::offset_of!(wavefront_sequences_t, seq_buffer) - 56usize];
    ["Offset of field: wavefront_sequences_t::seq_buffer_allocated"]
        [::std::mem::offset_of!(wavefront_sequences_t, seq_buffer_allocated) - 64usize];
    ["Offset of field: wavefront_sequences_t::pattern_buffer"]
        [::std::mem::offset_of!(wavefront_sequences_t, pattern_buffer) - 72usize];
    ["Offset of field: wavefront_sequences_t::text_buffer"]
        [::std::mem::offset_of!(wavefront_sequences_t, text_buffer) - 80usize];
    ["Offset of field: wavefront_sequences_t::pattern_buffer_length"]
        [::std::mem::offset_of!(wavefront_sequences_t, pattern_buffer_length) - 88usize];
    ["Offset of field: wavefront_sequences_t::text_buffer_length"]
        [::std::mem::offset_of!(wavefront_sequences_t, text_buffer_length) - 92usize];
    ["Offset of field: wavefront_sequences_t::pattern_eos"]
        [::std::mem::offset_of!(wavefront_sequences_t, pattern_eos) - 96usize];
    ["Offset of field: wavefront_sequences_t::text_eos"]
        [::std::mem::offset_of!(wavefront_sequences_t, text_eos) - 97usize];
};
unsafe extern "C" {
    pub fn wavefront_sequences_allocate(wf_sequences: *mut wavefront_sequences_t);
}
unsafe extern "C" {
    pub fn wavefront_sequences_free(wf_sequences: *mut wavefront_sequences_t);
}
unsafe extern "C" {
    pub fn wavefront_sequences_init_ascii(
        wf_sequences: *mut wavefront_sequences_t,
        pattern: *const ::std::os::raw::c_char,
        pattern_length: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_length: ::std::os::raw::c_int,
        reverse: bool,
    );
}
unsafe extern "C" {
    pub fn wavefront_sequences_init_lambda(
        wf_sequences: *mut wavefront_sequences_t,
        match_funct: alignment_match_funct_t,
        match_funct_arguments: *mut ::std::os::raw::c_void,
        pattern_length: ::std::os::raw::c_int,
        text_length: ::std::os::raw::c_int,
        reverse: bool,
    );
}
unsafe extern "C" {
    pub fn wavefront_sequences_init_packed2bits(
        wf_sequences: *mut wavefront_sequences_t,
        pattern: *const u8,
        pattern_length: ::std::os::raw::c_int,
        text: *const u8,
        text_length: ::std::os::raw::c_int,
        reverse: bool,
    );
}
unsafe extern "C" {
    pub fn wavefront_sequences_cmp(
        wf_sequences: *mut wavefront_sequences_t,
        pattern_pos: ::std::os::raw::c_int,
        text_pos: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    pub fn wavefront_sequences_get_pattern(
        wf_sequences: *mut wavefront_sequences_t,
        position: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn wavefront_sequences_get_text(
        wf_sequences: *mut wavefront_sequences_t,
        position: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn wavefront_sequences_set_bounds(
        wf_sequences: *mut wavefront_sequences_t,
        pattern_begin: ::std::os::raw::c_int,
        pattern_end: ::std::os::raw::c_int,
        text_begin: ::std::os::raw::c_int,
        text_end: ::std::os::raw::c_int,
    );
}
pub type pcigar_t = u32;
pub type bt_block_idx_t = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct bt_block_t {
    pub pcigar: pcigar_t,
    pub prev_idx: bt_block_idx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bt_block_t"][::std::mem::size_of::<bt_block_t>() - 8usize];
    ["Alignment of bt_block_t"][::std::mem::align_of::<bt_block_t>() - 1usize];
    ["Offset of field: bt_block_t::pcigar"][::std::mem::offset_of!(bt_block_t, pcigar) - 0usize];
    ["Offset of field: bt_block_t::prev_idx"]
        [::std::mem::offset_of!(bt_block_t, prev_idx) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wf_backtrace_buffer_t {
    pub segment_idx: ::std::os::raw::c_int,
    pub segment_offset: ::std::os::raw::c_int,
    pub block_next: *mut bt_block_t,
    pub segments: *mut vector_t,
    pub alignment_init_pos: *mut vector_t,
    pub num_compacted_blocks: bt_block_idx_t,
    pub num_compactions: ::std::os::raw::c_int,
    pub alignment_packed: *mut vector_t,
    pub prefetch_blocks_idxs: *mut vector_t,
    pub mm_allocator: *mut mm_allocator_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wf_backtrace_buffer_t"][::std::mem::size_of::<wf_backtrace_buffer_t>() - 64usize];
    ["Alignment of wf_backtrace_buffer_t"]
        [::std::mem::align_of::<wf_backtrace_buffer_t>() - 8usize];
    ["Offset of field: wf_backtrace_buffer_t::segment_idx"]
        [::std::mem::offset_of!(wf_backtrace_buffer_t, segment_idx) - 0usize];
    ["Offset of field: wf_backtrace_buffer_t::segment_offset"]
        [::std::mem::offset_of!(wf_backtrace_buffer_t, segment_offset) - 4usize];
    ["Offset of field: wf_backtrace_buffer_t::block_next"]
        [::std::mem::offset_of!(wf_backtrace_buffer_t, block_next) - 8usize];
    ["Offset of field: wf_backtrace_buffer_t::segments"]
        [::std::mem::offset_of!(wf_backtrace_buffer_t, segments) - 16usize];
    ["Offset of field: wf_backtrace_buffer_t::alignment_init_pos"]
        [::std::mem::offset_of!(wf_backtrace_buffer_t, alignment_init_pos) - 24usize];
    ["Offset of field: wf_backtrace_buffer_t::num_compacted_blocks"]
        [::std::mem::offset_of!(wf_backtrace_buffer_t, num_compacted_blocks) - 32usize];
    ["Offset of field: wf_backtrace_buffer_t::num_compactions"]
        [::std::mem::offset_of!(wf_backtrace_buffer_t, num_compactions) - 36usize];
    ["Offset of field: wf_backtrace_buffer_t::alignment_packed"]
        [::std::mem::offset_of!(wf_backtrace_buffer_t, alignment_packed) - 40usize];
    ["Offset of field: wf_backtrace_buffer_t::prefetch_blocks_idxs"]
        [::std::mem::offset_of!(wf_backtrace_buffer_t, prefetch_blocks_idxs) - 48usize];
    ["Offset of field: wf_backtrace_buffer_t::mm_allocator"]
        [::std::mem::offset_of!(wf_backtrace_buffer_t, mm_allocator) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_pos_t {
    pub score: ::std::os::raw::c_int,
    pub k: ::std::os::raw::c_int,
    pub offset: wf_offset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_pos_t"][::std::mem::size_of::<wavefront_pos_t>() - 12usize];
    ["Alignment of wavefront_pos_t"][::std::mem::align_of::<wavefront_pos_t>() - 4usize];
    ["Offset of field: wavefront_pos_t::score"]
        [::std::mem::offset_of!(wavefront_pos_t, score) - 0usize];
    ["Offset of field: wavefront_pos_t::k"][::std::mem::offset_of!(wavefront_pos_t, k) - 4usize];
    ["Offset of field: wavefront_pos_t::offset"]
        [::std::mem::offset_of!(wavefront_pos_t, offset) - 8usize];
};
pub const wavefront_status_type_wavefront_status_free: wavefront_status_type = 0;
pub const wavefront_status_type_wavefront_status_busy: wavefront_status_type = 1;
pub const wavefront_status_type_wavefront_status_deallocated: wavefront_status_type = 2;
pub type wavefront_status_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_t {
    pub null: bool,
    pub lo: ::std::os::raw::c_int,
    pub hi: ::std::os::raw::c_int,
    pub offsets: *mut wf_offset_t,
    pub offsets_mem: *mut wf_offset_t,
    pub bt_occupancy_max: ::std::os::raw::c_int,
    pub bt_pcigar: *mut pcigar_t,
    pub bt_prev: *mut bt_block_idx_t,
    pub bt_pcigar_mem: *mut pcigar_t,
    pub bt_prev_mem: *mut bt_block_idx_t,
    pub status: wavefront_status_type,
    pub wf_elements_allocated: ::std::os::raw::c_int,
    pub wf_elements_allocated_min: ::std::os::raw::c_int,
    pub wf_elements_allocated_max: ::std::os::raw::c_int,
    pub wf_elements_init_min: ::std::os::raw::c_int,
    pub wf_elements_init_max: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_t"][::std::mem::size_of::<wavefront_t>() - 96usize];
    ["Alignment of wavefront_t"][::std::mem::align_of::<wavefront_t>() - 8usize];
    ["Offset of field: wavefront_t::null"][::std::mem::offset_of!(wavefront_t, null) - 0usize];
    ["Offset of field: wavefront_t::lo"][::std::mem::offset_of!(wavefront_t, lo) - 4usize];
    ["Offset of field: wavefront_t::hi"][::std::mem::offset_of!(wavefront_t, hi) - 8usize];
    ["Offset of field: wavefront_t::offsets"]
        [::std::mem::offset_of!(wavefront_t, offsets) - 16usize];
    ["Offset of field: wavefront_t::offsets_mem"]
        [::std::mem::offset_of!(wavefront_t, offsets_mem) - 24usize];
    ["Offset of field: wavefront_t::bt_occupancy_max"]
        [::std::mem::offset_of!(wavefront_t, bt_occupancy_max) - 32usize];
    ["Offset of field: wavefront_t::bt_pcigar"]
        [::std::mem::offset_of!(wavefront_t, bt_pcigar) - 40usize];
    ["Offset of field: wavefront_t::bt_prev"]
        [::std::mem::offset_of!(wavefront_t, bt_prev) - 48usize];
    ["Offset of field: wavefront_t::bt_pcigar_mem"]
        [::std::mem::offset_of!(wavefront_t, bt_pcigar_mem) - 56usize];
    ["Offset of field: wavefront_t::bt_prev_mem"]
        [::std::mem::offset_of!(wavefront_t, bt_prev_mem) - 64usize];
    ["Offset of field: wavefront_t::status"][::std::mem::offset_of!(wavefront_t, status) - 72usize];
    ["Offset of field: wavefront_t::wf_elements_allocated"]
        [::std::mem::offset_of!(wavefront_t, wf_elements_allocated) - 76usize];
    ["Offset of field: wavefront_t::wf_elements_allocated_min"]
        [::std::mem::offset_of!(wavefront_t, wf_elements_allocated_min) - 80usize];
    ["Offset of field: wavefront_t::wf_elements_allocated_max"]
        [::std::mem::offset_of!(wavefront_t, wf_elements_allocated_max) - 84usize];
    ["Offset of field: wavefront_t::wf_elements_init_min"]
        [::std::mem::offset_of!(wavefront_t, wf_elements_init_min) - 88usize];
    ["Offset of field: wavefront_t::wf_elements_init_max"]
        [::std::mem::offset_of!(wavefront_t, wf_elements_init_max) - 92usize];
};
unsafe extern "C" {
    pub fn wavefront_allocate(
        wavefront: *mut wavefront_t,
        wf_elements_allocated: ::std::os::raw::c_int,
        allocate_backtrace: bool,
        mm_allocator: *mut mm_allocator_t,
    );
}
unsafe extern "C" {
    pub fn wavefront_resize(
        wavefront: *mut wavefront_t,
        wf_elements_allocated: ::std::os::raw::c_int,
        mm_allocator: *mut mm_allocator_t,
    );
}
unsafe extern "C" {
    pub fn wavefront_free(wavefront: *mut wavefront_t, mm_allocator: *mut mm_allocator_t);
}
unsafe extern "C" {
    pub fn wavefront_init(
        wavefront: *mut wavefront_t,
        min_lo: ::std::os::raw::c_int,
        max_hi: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_init_null(
        wavefront: *mut wavefront_t,
        min_lo: ::std::os::raw::c_int,
        max_hi: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_init_victim(
        wavefront: *mut wavefront_t,
        min_lo: ::std::os::raw::c_int,
        max_hi: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_set_limits(
        wavefront: *mut wavefront_t,
        lo: ::std::os::raw::c_int,
        hi: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_get_size(wavefront: *mut wavefront_t) -> u64;
}
pub const wf_slab_mode_t_wf_slab_reuse: wf_slab_mode_t = 1;
pub const wf_slab_mode_t_wf_slab_tight: wf_slab_mode_t = 2;
pub type wf_slab_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_slab_t {
    pub allocate_backtrace: bool,
    pub slab_mode: wf_slab_mode_t,
    pub init_wf_length: ::std::os::raw::c_int,
    pub current_wf_length: ::std::os::raw::c_int,
    pub wavefronts: *mut vector_t,
    pub wavefronts_free: *mut vector_t,
    pub memory_used: u64,
    pub mm_allocator: *mut mm_allocator_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_slab_t"][::std::mem::size_of::<wavefront_slab_t>() - 48usize];
    ["Alignment of wavefront_slab_t"][::std::mem::align_of::<wavefront_slab_t>() - 8usize];
    ["Offset of field: wavefront_slab_t::allocate_backtrace"]
        [::std::mem::offset_of!(wavefront_slab_t, allocate_backtrace) - 0usize];
    ["Offset of field: wavefront_slab_t::slab_mode"]
        [::std::mem::offset_of!(wavefront_slab_t, slab_mode) - 4usize];
    ["Offset of field: wavefront_slab_t::init_wf_length"]
        [::std::mem::offset_of!(wavefront_slab_t, init_wf_length) - 8usize];
    ["Offset of field: wavefront_slab_t::current_wf_length"]
        [::std::mem::offset_of!(wavefront_slab_t, current_wf_length) - 12usize];
    ["Offset of field: wavefront_slab_t::wavefronts"]
        [::std::mem::offset_of!(wavefront_slab_t, wavefronts) - 16usize];
    ["Offset of field: wavefront_slab_t::wavefronts_free"]
        [::std::mem::offset_of!(wavefront_slab_t, wavefronts_free) - 24usize];
    ["Offset of field: wavefront_slab_t::memory_used"]
        [::std::mem::offset_of!(wavefront_slab_t, memory_used) - 32usize];
    ["Offset of field: wavefront_slab_t::mm_allocator"]
        [::std::mem::offset_of!(wavefront_slab_t, mm_allocator) - 40usize];
};
unsafe extern "C" {
    pub fn wavefront_slab_new(
        init_wf_length: ::std::os::raw::c_int,
        allocate_backtrace: bool,
        slab_mode: wf_slab_mode_t,
        mm_allocator: *mut mm_allocator_t,
    ) -> *mut wavefront_slab_t;
}
unsafe extern "C" {
    pub fn wavefront_slab_reap(wavefront_slab: *mut wavefront_slab_t);
}
unsafe extern "C" {
    pub fn wavefront_slab_clear(wavefront_slab: *mut wavefront_slab_t);
}
unsafe extern "C" {
    pub fn wavefront_slab_delete(wavefront_slab: *mut wavefront_slab_t);
}
unsafe extern "C" {
    pub fn wavefront_slab_set_mode(
        wavefront_slab: *mut wavefront_slab_t,
        slab_mode: wf_slab_mode_t,
    );
}
unsafe extern "C" {
    pub fn wavefront_slab_allocate(
        wavefront_slab: *mut wavefront_slab_t,
        min_lo: ::std::os::raw::c_int,
        max_hi: ::std::os::raw::c_int,
    ) -> *mut wavefront_t;
}
unsafe extern "C" {
    pub fn wavefront_slab_free(wavefront_slab: *mut wavefront_slab_t, wavefront: *mut wavefront_t);
}
unsafe extern "C" {
    pub fn wavefront_slab_get_size(wavefront_slab: *mut wavefront_slab_t) -> u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_components_t {
    pub memory_modular: bool,
    pub bt_piggyback: bool,
    pub num_wavefronts: ::std::os::raw::c_int,
    pub max_score_scope: ::std::os::raw::c_int,
    pub historic_max_hi: ::std::os::raw::c_int,
    pub historic_min_lo: ::std::os::raw::c_int,
    pub mwavefronts: *mut *mut wavefront_t,
    pub i1wavefronts: *mut *mut wavefront_t,
    pub i2wavefronts: *mut *mut wavefront_t,
    pub d1wavefronts: *mut *mut wavefront_t,
    pub d2wavefronts: *mut *mut wavefront_t,
    pub wavefront_null: *mut wavefront_t,
    pub wavefront_victim: *mut wavefront_t,
    pub bt_buffer: *mut wf_backtrace_buffer_t,
    pub mm_allocator: *mut mm_allocator_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_components_t"][::std::mem::size_of::<wavefront_components_t>() - 96usize];
    ["Alignment of wavefront_components_t"]
        [::std::mem::align_of::<wavefront_components_t>() - 8usize];
    ["Offset of field: wavefront_components_t::memory_modular"]
        [::std::mem::offset_of!(wavefront_components_t, memory_modular) - 0usize];
    ["Offset of field: wavefront_components_t::bt_piggyback"]
        [::std::mem::offset_of!(wavefront_components_t, bt_piggyback) - 1usize];
    ["Offset of field: wavefront_components_t::num_wavefronts"]
        [::std::mem::offset_of!(wavefront_components_t, num_wavefronts) - 4usize];
    ["Offset of field: wavefront_components_t::max_score_scope"]
        [::std::mem::offset_of!(wavefront_components_t, max_score_scope) - 8usize];
    ["Offset of field: wavefront_components_t::historic_max_hi"]
        [::std::mem::offset_of!(wavefront_components_t, historic_max_hi) - 12usize];
    ["Offset of field: wavefront_components_t::historic_min_lo"]
        [::std::mem::offset_of!(wavefront_components_t, historic_min_lo) - 16usize];
    ["Offset of field: wavefront_components_t::mwavefronts"]
        [::std::mem::offset_of!(wavefront_components_t, mwavefronts) - 24usize];
    ["Offset of field: wavefront_components_t::i1wavefronts"]
        [::std::mem::offset_of!(wavefront_components_t, i1wavefronts) - 32usize];
    ["Offset of field: wavefront_components_t::i2wavefronts"]
        [::std::mem::offset_of!(wavefront_components_t, i2wavefronts) - 40usize];
    ["Offset of field: wavefront_components_t::d1wavefronts"]
        [::std::mem::offset_of!(wavefront_components_t, d1wavefronts) - 48usize];
    ["Offset of field: wavefront_components_t::d2wavefronts"]
        [::std::mem::offset_of!(wavefront_components_t, d2wavefronts) - 56usize];
    ["Offset of field: wavefront_components_t::wavefront_null"]
        [::std::mem::offset_of!(wavefront_components_t, wavefront_null) - 64usize];
    ["Offset of field: wavefront_components_t::wavefront_victim"]
        [::std::mem::offset_of!(wavefront_components_t, wavefront_victim) - 72usize];
    ["Offset of field: wavefront_components_t::bt_buffer"]
        [::std::mem::offset_of!(wavefront_components_t, bt_buffer) - 80usize];
    ["Offset of field: wavefront_components_t::mm_allocator"]
        [::std::mem::offset_of!(wavefront_components_t, mm_allocator) - 88usize];
};
unsafe extern "C" {
    pub fn wavefront_components_allocate(
        wf_components: *mut wavefront_components_t,
        max_pattern_length: ::std::os::raw::c_int,
        max_text_length: ::std::os::raw::c_int,
        penalties: *mut wavefront_penalties_t,
        memory_modular: bool,
        bt_piggyback: bool,
        mm_allocator: *mut mm_allocator_t,
    );
}
unsafe extern "C" {
    pub fn wavefront_components_reap(wf_components: *mut wavefront_components_t);
}
unsafe extern "C" {
    pub fn wavefront_components_clear(wf_components: *mut wavefront_components_t);
}
unsafe extern "C" {
    pub fn wavefront_components_free(wf_components: *mut wavefront_components_t);
}
unsafe extern "C" {
    pub fn wavefront_components_resize(
        wf_components: *mut wavefront_components_t,
        max_pattern_length: ::std::os::raw::c_int,
        max_text_length: ::std::os::raw::c_int,
        penalties: *mut wavefront_penalties_t,
    );
}
unsafe extern "C" {
    pub fn wavefront_components_resize_null__victim(
        wf_components: *mut wavefront_components_t,
        lo: ::std::os::raw::c_int,
        hi: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_components_compact_bt_buffer(
        wf_components: *mut wavefront_components_t,
        score: ::std::os::raw::c_int,
        verbose: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_bialigner_t {
    pub wf_forward: *mut wavefront_aligner_t,
    pub wf_reverse: *mut wavefront_aligner_t,
    pub wf_base: *mut wavefront_aligner_t,
    pub wf_align_compute: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut wavefront_aligner_t, arg2: ::std::os::raw::c_int),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_bialigner_t"][::std::mem::size_of::<wavefront_bialigner_t>() - 32usize];
    ["Alignment of wavefront_bialigner_t"]
        [::std::mem::align_of::<wavefront_bialigner_t>() - 8usize];
    ["Offset of field: wavefront_bialigner_t::wf_forward"]
        [::std::mem::offset_of!(wavefront_bialigner_t, wf_forward) - 0usize];
    ["Offset of field: wavefront_bialigner_t::wf_reverse"]
        [::std::mem::offset_of!(wavefront_bialigner_t, wf_reverse) - 8usize];
    ["Offset of field: wavefront_bialigner_t::wf_base"]
        [::std::mem::offset_of!(wavefront_bialigner_t, wf_base) - 16usize];
    ["Offset of field: wavefront_bialigner_t::wf_align_compute"]
        [::std::mem::offset_of!(wavefront_bialigner_t, wf_align_compute) - 24usize];
};
unsafe extern "C" {
    pub fn wavefront_bialigner_new(
        attributes: *mut wavefront_aligner_attr_t,
        plot: *mut wavefront_plot_t,
    ) -> *mut wavefront_bialigner_t;
}
unsafe extern "C" {
    pub fn wavefront_bialigner_reap(wf_bialigner: *mut wavefront_bialigner_t);
}
unsafe extern "C" {
    pub fn wavefront_bialigner_delete(wf_bialigner: *mut wavefront_bialigner_t);
}
unsafe extern "C" {
    pub fn wavefront_bialigner_set_sequences_ascii(
        wf_bialigner: *mut wavefront_bialigner_t,
        pattern: *const ::std::os::raw::c_char,
        pattern_length: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_length: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_bialigner_set_sequences_lambda(
        wf_bialigner: *mut wavefront_bialigner_t,
        match_funct: alignment_match_funct_t,
        match_funct_arguments: *mut ::std::os::raw::c_void,
        pattern_length: ::std::os::raw::c_int,
        text_length: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_bialigner_set_sequences_packed2bits(
        wf_bialigner: *mut wavefront_bialigner_t,
        pattern: *const u8,
        pattern_length: ::std::os::raw::c_int,
        text: *const u8,
        text_length: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_bialigner_set_sequences_bounds(
        wf_bialigner: *mut wavefront_bialigner_t,
        pattern_begin: ::std::os::raw::c_int,
        pattern_end: ::std::os::raw::c_int,
        text_begin: ::std::os::raw::c_int,
        text_end: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_bialigner_get_size(wf_bialigner: *mut wavefront_bialigner_t) -> u64;
}
unsafe extern "C" {
    pub fn wavefront_bialigner_set_heuristic(
        wf_bialigner: *mut wavefront_bialigner_t,
        heuristic: *mut wavefront_heuristic_t,
    );
}
unsafe extern "C" {
    pub fn wavefront_bialigner_set_max_alignment_steps(
        wf_bialigner: *mut wavefront_bialigner_t,
        max_alignment_steps: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_bialigner_set_max_memory(
        wf_bialigner: *mut wavefront_bialigner_t,
        max_memory_resident: u64,
        max_memory_abort: u64,
    );
}
unsafe extern "C" {
    pub fn wavefront_bialigner_set_max_num_threads(
        wf_bialigner: *mut wavefront_bialigner_t,
        max_num_threads: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_bialigner_set_min_offsets_per_thread(
        wf_bialigner: *mut wavefront_bialigner_t,
        min_offsets_per_thread: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_align_strerror(
        error_code: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn wavefront_align_strerror_short(
        error_code: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wavefront_align_status_t {
    pub status: ::std::os::raw::c_int,
    pub score: ::std::os::raw::c_int,
    pub dropped: bool,
    pub num_null_steps: ::std::os::raw::c_int,
    pub memory_used: u64,
    pub wf_align_compute: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut wavefront_aligner_t, arg2: ::std::os::raw::c_int),
    >,
    pub wf_align_extend: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut wavefront_aligner_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wavefront_align_status_t"]
        [::std::mem::size_of::<wavefront_align_status_t>() - 40usize];
    ["Alignment of wavefront_align_status_t"]
        [::std::mem::align_of::<wavefront_align_status_t>() - 8usize];
    ["Offset of field: wavefront_align_status_t::status"]
        [::std::mem::offset_of!(wavefront_align_status_t, status) - 0usize];
    ["Offset of field: wavefront_align_status_t::score"]
        [::std::mem::offset_of!(wavefront_align_status_t, score) - 4usize];
    ["Offset of field: wavefront_align_status_t::dropped"]
        [::std::mem::offset_of!(wavefront_align_status_t, dropped) - 8usize];
    ["Offset of field: wavefront_align_status_t::num_null_steps"]
        [::std::mem::offset_of!(wavefront_align_status_t, num_null_steps) - 12usize];
    ["Offset of field: wavefront_align_status_t::memory_used"]
        [::std::mem::offset_of!(wavefront_align_status_t, memory_used) - 16usize];
    ["Offset of field: wavefront_align_status_t::wf_align_compute"]
        [::std::mem::offset_of!(wavefront_align_status_t, wf_align_compute) - 24usize];
    ["Offset of field: wavefront_align_status_t::wf_align_extend"]
        [::std::mem::offset_of!(wavefront_align_status_t, wf_align_extend) - 32usize];
};
pub const wavefront_align_mode_t_wf_align_regular: wavefront_align_mode_t = 0;
pub const wavefront_align_mode_t_wf_align_biwfa: wavefront_align_mode_t = 1;
pub const wavefront_align_mode_t_wf_align_biwfa_breakpoint_forward: wavefront_align_mode_t = 2;
pub const wavefront_align_mode_t_wf_align_biwfa_breakpoint_reverse: wavefront_align_mode_t = 3;
pub const wavefront_align_mode_t_wf_align_biwfa_subsidiary: wavefront_align_mode_t = 4;
pub type wavefront_align_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wavefront_aligner_t {
    pub align_mode: wavefront_align_mode_t,
    pub align_mode_tag: *mut ::std::os::raw::c_char,
    pub align_status: wavefront_align_status_t,
    pub sequences: wavefront_sequences_t,
    pub alignment_scope: alignment_scope_t,
    pub alignment_form: alignment_form_t,
    pub penalties: wavefront_penalties_t,
    pub heuristic: wavefront_heuristic_t,
    pub memory_mode: wavefront_memory_t,
    pub wf_components: wavefront_components_t,
    pub component_begin: affine2p_matrix_type,
    pub component_end: affine2p_matrix_type,
    pub alignment_end_pos: wavefront_pos_t,
    pub bialigner: *mut wavefront_bialigner_t,
    pub cigar: *mut cigar_t,
    pub mm_allocator_own: bool,
    pub mm_allocator: *mut mm_allocator_t,
    pub wavefront_slab: *mut wavefront_slab_t,
    pub plot: *mut wavefront_plot_t,
    pub system: alignment_system_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _wavefront_aligner_t"][::std::mem::size_of::<_wavefront_aligner_t>() - 648usize];
    ["Alignment of _wavefront_aligner_t"][::std::mem::align_of::<_wavefront_aligner_t>() - 8usize];
    ["Offset of field: _wavefront_aligner_t::align_mode"]
        [::std::mem::offset_of!(_wavefront_aligner_t, align_mode) - 0usize];
    ["Offset of field: _wavefront_aligner_t::align_mode_tag"]
        [::std::mem::offset_of!(_wavefront_aligner_t, align_mode_tag) - 8usize];
    ["Offset of field: _wavefront_aligner_t::align_status"]
        [::std::mem::offset_of!(_wavefront_aligner_t, align_status) - 16usize];
    ["Offset of field: _wavefront_aligner_t::sequences"]
        [::std::mem::offset_of!(_wavefront_aligner_t, sequences) - 56usize];
    ["Offset of field: _wavefront_aligner_t::alignment_scope"]
        [::std::mem::offset_of!(_wavefront_aligner_t, alignment_scope) - 160usize];
    ["Offset of field: _wavefront_aligner_t::alignment_form"]
        [::std::mem::offset_of!(_wavefront_aligner_t, alignment_form) - 164usize];
    ["Offset of field: _wavefront_aligner_t::penalties"]
        [::std::mem::offset_of!(_wavefront_aligner_t, penalties) - 188usize];
    ["Offset of field: _wavefront_aligner_t::heuristic"]
        [::std::mem::offset_of!(_wavefront_aligner_t, heuristic) - 272usize];
    ["Offset of field: _wavefront_aligner_t::memory_mode"]
        [::std::mem::offset_of!(_wavefront_aligner_t, memory_mode) - 324usize];
    ["Offset of field: _wavefront_aligner_t::wf_components"]
        [::std::mem::offset_of!(_wavefront_aligner_t, wf_components) - 328usize];
    ["Offset of field: _wavefront_aligner_t::component_begin"]
        [::std::mem::offset_of!(_wavefront_aligner_t, component_begin) - 424usize];
    ["Offset of field: _wavefront_aligner_t::component_end"]
        [::std::mem::offset_of!(_wavefront_aligner_t, component_end) - 428usize];
    ["Offset of field: _wavefront_aligner_t::alignment_end_pos"]
        [::std::mem::offset_of!(_wavefront_aligner_t, alignment_end_pos) - 432usize];
    ["Offset of field: _wavefront_aligner_t::bialigner"]
        [::std::mem::offset_of!(_wavefront_aligner_t, bialigner) - 448usize];
    ["Offset of field: _wavefront_aligner_t::cigar"]
        [::std::mem::offset_of!(_wavefront_aligner_t, cigar) - 456usize];
    ["Offset of field: _wavefront_aligner_t::mm_allocator_own"]
        [::std::mem::offset_of!(_wavefront_aligner_t, mm_allocator_own) - 464usize];
    ["Offset of field: _wavefront_aligner_t::mm_allocator"]
        [::std::mem::offset_of!(_wavefront_aligner_t, mm_allocator) - 472usize];
    ["Offset of field: _wavefront_aligner_t::wavefront_slab"]
        [::std::mem::offset_of!(_wavefront_aligner_t, wavefront_slab) - 480usize];
    ["Offset of field: _wavefront_aligner_t::plot"]
        [::std::mem::offset_of!(_wavefront_aligner_t, plot) - 488usize];
    ["Offset of field: _wavefront_aligner_t::system"]
        [::std::mem::offset_of!(_wavefront_aligner_t, system) - 496usize];
};
unsafe extern "C" {
    pub fn wavefront_aligner_new(
        attributes: *mut wavefront_aligner_attr_t,
    ) -> *mut wavefront_aligner_t;
}
unsafe extern "C" {
    pub fn wavefront_aligner_reap(wf_aligner: *mut wavefront_aligner_t);
}
unsafe extern "C" {
    pub fn wavefront_aligner_delete(wf_aligner: *mut wavefront_aligner_t);
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_alignment_end_to_end(wf_aligner: *mut wavefront_aligner_t);
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_alignment_free_ends(
        wf_aligner: *mut wavefront_aligner_t,
        pattern_begin_free: ::std::os::raw::c_int,
        pattern_end_free: ::std::os::raw::c_int,
        text_begin_free: ::std::os::raw::c_int,
        text_end_free: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_alignment_extension(wf_aligner: *mut wavefront_aligner_t);
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_heuristic_none(wf_aligner: *mut wavefront_aligner_t);
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_heuristic_wfadaptive(
        wf_aligner: *mut wavefront_aligner_t,
        min_wavefront_length: ::std::os::raw::c_int,
        max_distance_threshold: ::std::os::raw::c_int,
        score_steps: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_heuristic_wfmash(
        wf_aligner: *mut wavefront_aligner_t,
        min_wavefront_length: ::std::os::raw::c_int,
        max_distance_threshold: ::std::os::raw::c_int,
        score_steps: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_heuristic_xdrop(
        wf_aligner: *mut wavefront_aligner_t,
        xdrop: ::std::os::raw::c_int,
        score_steps: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_heuristic_zdrop(
        wf_aligner: *mut wavefront_aligner_t,
        ydrop: ::std::os::raw::c_int,
        score_steps: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_heuristic_banded_static(
        wf_aligner: *mut wavefront_aligner_t,
        band_min_k: ::std::os::raw::c_int,
        band_max_k: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_heuristic_banded_adaptive(
        wf_aligner: *mut wavefront_aligner_t,
        band_min_k: ::std::os::raw::c_int,
        band_max_k: ::std::os::raw::c_int,
        score_steps: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_max_alignment_steps(
        wf_aligner: *mut wavefront_aligner_t,
        max_alignment_steps: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_max_memory(
        wf_aligner: *mut wavefront_aligner_t,
        max_memory_resident: u64,
        max_memory_abort: u64,
    );
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_max_num_threads(
        wf_aligner: *mut wavefront_aligner_t,
        max_num_threads: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_aligner_set_min_offsets_per_thread(
        wf_aligner: *mut wavefront_aligner_t,
        min_offsets_per_thread: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_align(
        wf_aligner: *mut wavefront_aligner_t,
        pattern: *const ::std::os::raw::c_char,
        pattern_length: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wavefront_align_lambda(
        wf_aligner: *mut wavefront_aligner_t,
        match_funct: alignment_match_funct_t,
        match_funct_arguments: *mut ::std::os::raw::c_void,
        pattern_length: ::std::os::raw::c_int,
        text_length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wavefront_align_packed2bits(
        wf_aligner: *mut wavefront_aligner_t,
        pattern: *const u8,
        pattern_length: ::std::os::raw::c_int,
        text: *const u8,
        text_length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wavefront_aligner_init(
        wf_aligner: *mut wavefront_aligner_t,
        align_level: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn wavefront_aligner_get_size(wf_aligner: *mut wavefront_aligner_t) -> u64;
}
unsafe extern "C" {
    pub fn wavefront_aligner_maxtrim_cigar(wf_aligner: *mut wavefront_aligner_t) -> bool;
}
unsafe extern "C" {
    pub fn wavefront_aligner_print_mode(stream: *mut FILE, wf_aligner: *mut wavefront_aligner_t);
}
unsafe extern "C" {
    pub fn wavefront_aligner_print_scope(stream: *mut FILE, wf_aligner: *mut wavefront_aligner_t);
}
unsafe extern "C" {
    pub fn wavefront_aligner_print_conf(stream: *mut FILE, wf_aligner: *mut wavefront_aligner_t);
}
